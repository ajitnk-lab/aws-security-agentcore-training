{"tasks":[{"task_description":"Layer 0.1: Create new project folder structure following best practices (src/, tests/, infrastructure/, docs/, scripts/)","completed":false},{"task_description":"Layer 0.2: Setup .gitignore for Python, Node.js, CDK, and AWS artifacts","completed":false},{"task_description":"Layer 0.3: Create README.md with project overview and architecture diagram","completed":false},{"task_description":"Layer 0.4: Initialize git repository and create initial commit","completed":false},{"task_description":"Layer 0.5: Create requirements.txt for project-level dependencies","completed":false},{"task_description":"Layer 0.6: Create package.json for CDK and frontend dependencies","completed":false},{"task_description":"Layer 1.1: Copy working MCP server (server.py) from old project with 6 tools: CheckSecurityServices, GetSecurityFindings, CheckStorageEncryption, CheckNetworkSecurity, ListServicesInRegion, GetStoredSecurityContext","completed":false},{"task_description":"Layer 1.2: Create requirements.txt for MCP server with all dependencies","completed":false},{"task_description":"Layer 1.3: Test MCP server locally with python server.py","completed":false},{"task_description":"Layer 2.1: Configure AgentCore Runtime with agentcore configure -e server.py --region us-east-1","completed":false},{"task_description":"Layer 2.2: Deploy to AgentCore Runtime with agentcore launch","completed":false},{"task_description":"Layer 2.3: Get Runtime HTTP endpoint from agentcore status --verbose","completed":false},{"task_description":"Layer 2.4: Test Runtime endpoint directly with curl","completed":false},{"task_description":"Layer 3.1: Create OAuth/Cognito using Python SDK GatewayClient.create_oauth_authorizer_with_cognito()","completed":false},{"task_description":"Layer 3.2: Save auth-config.json and client-info.json for later use","completed":false},{"task_description":"Layer 3.3: Create AgentCore Gateway with create_mcp_gateway() using saved auth config","completed":false},{"task_description":"Layer 3.4: Fix IAM permissions with client.fix_iam_permissions(gateway)","completed":false},{"task_description":"Layer 3.5: Create Lambda target on Gateway with create_mcp_gateway_target(target_type='lambda', target_payload=None)","completed":false},{"task_description":"Layer 3.6: Save gateway-config.json with gateway URL and ID","completed":false},{"task_description":"Layer 3.7: Test Gateway with MCP protocol using curl with Bearer token","completed":false},{"task_description":"Layer 4.1: Create Security Lambda (gateway_proxy_lambda.py) that gets OAuth token from Cognito","completed":false},{"task_description":"Layer 4.2: Add parameter mapping logic in Lambda (Bedrock format → MCP format)","completed":false},{"task_description":"Layer 4.3: Add tool name mapping with SecurityMCPTools__ prefix","completed":false},{"task_description":"Layer 4.4: Add Gateway URL as environment variable in Lambda","completed":false},{"task_description":"Layer 4.5: Add Cognito client credentials as environment variables","completed":false},{"task_description":"Layer 4.6: Package Lambda with requests library as deployment zip","completed":false},{"task_description":"Layer 4.7: Deploy Lambda using CDK or boto3","completed":false},{"task_description":"Layer 4.8: Test Lambda directly with test event","completed":false},{"task_description":"Layer 5.1: Create IAM role for Bedrock Agent with bedrock:InvokeModel permission","completed":false},{"task_description":"Layer 5.2: Create Bedrock Agent with boto3 create-agent API","completed":false},{"task_description":"Layer 5.3: Create action group with Function Details (not OpenAPI) for all 6 tools","completed":false},{"task_description":"Layer 5.4: Add Lambda ARN as action group executor","completed":false},{"task_description":"Layer 5.5: Add Lambda resource-based policy to allow bedrock.amazonaws.com principal","completed":false},{"task_description":"Layer 5.6: Prepare agent with prepare-agent API","completed":false},{"task_description":"Layer 5.7: Wait for agent to reach PREPARED state with wait-for-agent-ready.py","completed":false},{"task_description":"Layer 5.8: Wait additional 15s for stabilization","completed":false},{"task_description":"Layer 5.9: Create agent alias with create-agent-alias API","completed":false},{"task_description":"Layer 5.10: Test agent with invoke-agent API","completed":false},{"task_description":"Layer 6.1: Create Web API Lambda that calls Bedrock Agent invoke-agent","completed":false},{"task_description":"Layer 6.2: Add session management in Web API Lambda","completed":false},{"task_description":"Layer 6.3: Add CORS headers for frontend access","completed":false},{"task_description":"Layer 6.4: Create API Gateway REST API pointing to Web API Lambda","completed":false},{"task_description":"Layer 6.5: Deploy API Gateway and get invoke URL","completed":false},{"task_description":"Layer 6.6: Test API Gateway endpoint with curl","completed":false},{"task_description":"Layer 7.1: Create React/HTML frontend with chat interface","completed":false},{"task_description":"Layer 7.2: Add API Gateway URL to frontend config","completed":false},{"task_description":"Layer 7.3: Build frontend assets (npm run build)","completed":false},{"task_description":"Layer 7.4: Create S3 bucket for static hosting","completed":false},{"task_description":"Layer 7.5: Upload frontend assets to S3","completed":false},{"task_description":"Layer 7.6: Configure S3 bucket for static website hosting","completed":false},{"task_description":"Layer 7.7: Create CloudFront distribution pointing to S3","completed":false},{"task_description":"Layer 7.8: Test complete flow: UI → API → Agent → Lambda → Gateway → Runtime → MCP Server","completed":false}],"description":"Build complete AWS Security AgentCore solution from MCP server to UI - 7 layers bottom-up","context":[],"modified_files":[],"id":"1760860236765"}